// ƒê·ª£i cho to√†n b·ªô trang web ƒë∆∞·ª£c t·∫£i xong r·ªìi m·ªõi ch·∫°y code
document.addEventListener('DOMContentLoaded', () => {
    // L·∫•y c√°c ph·∫ßn t·ª≠ HTML m√† ch√∫ng ta c·∫ßn t∆∞∆°ng t√°c
    const recordBtn = document.getElementById('record-btn');
    const timerElement = document.getElementById('timer');
    const resultsPanel = document.querySelector('.results-content');

    // Khai b√°o c√°c bi·∫øn c·∫ßn thi·∫øt
    let mediaRecorder; // ƒê·ªëi t∆∞·ª£ng ch√≠nh ƒë·ªÉ ghi √¢m
    let audioChunks = []; // M·∫£ng ƒë·ªÉ l∆∞u c√°c m·∫©u √¢m thanh
    let timerInterval; // Bi·∫øn ƒë·ªÉ ƒëi·ªÅu khi·ªÉn ƒë·ªìng h·ªì ƒë·∫øm gi·ªù
    let seconds = 0; // S·ªë gi√¢y ƒë√£ ghi √¢m

    // --- C√ÅC H√ÄM X·ª¨ L√ù ---

    // H√†m ch√≠nh ƒë·ªÉ b·∫Øt ƒë·∫ßu/d·ª´ng ghi √¢m
    const toggleRecording = async () => {
        // Tr∆∞·ªùng h·ª£p 1: B·∫Øt ƒë·∫ßu ghi √¢m
        if (!mediaRecorder || mediaRecorder.state === 'inactive') {
            try {
                // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p microphone
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                
                // Kh·ªüi t·∫°o MediaRecorder v·ªõi stream √¢m thanh
                mediaRecorder = new MediaRecorder(stream);

                // S·ª± ki·ªán n√†y ƒë∆∞·ª£c g·ªçi khi c√≥ m·ªôt m·∫©u d·ªØ li·ªáu √¢m thanh
                mediaRecorder.ondataavailable = event => {
                    audioChunks.push(event.data);
                };

                // S·ª± ki·ªán n√†y ƒë∆∞·ª£c g·ªçi khi qu√° tr√¨nh ghi √¢m d·ª´ng l·∫°i
                mediaRecorder.onstop = () => {
                    // T·∫°o m·ªôt file √¢m thanh ho√†n ch·ªânh t·ª´ c√°c m·∫©u ƒë√£ thu
                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    
                    // T·∫°o m·ªôt URL t·∫°m th·ªùi cho file √¢m thanh ƒë·ªÉ c√≥ th·ªÉ ph√°t l·∫°i
                    const audioUrl = URL.createObjectURL(audioBlob);

                    // Hi·ªÉn th·ªã tr√¨nh ph√°t √¢m thanh ƒë·ªÉ ng∆∞·ªùi d√πng nghe l·∫°i
                    const audioPlayer = new Audio(audioUrl);
                    audioPlayer.controls = true; // Hi·ªÉn th·ªã c√°c n√∫t play/pause/volume
                    
                    // X√≥a n·ªôi dung c≈© v√† hi·ªÉn th·ªã tr√¨nh ph√°t √¢m thanh m·ªõi
                    resultsPanel.innerHTML = ''; // X√≥a ch·ªØ "K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y"
                    resultsPanel.appendChild(audioPlayer);
                    resultsPanel.insertAdjacentHTML('beforeend', '<p>B·∫£n ghi c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng. B·∫°n c√≥ th·ªÉ nghe l·∫°i.</p>');

                    // Reset m·∫£ng ch·ª©a c√°c m·∫©u √¢m thanh cho l·∫ßn ghi ti·∫øp theo
                    audioChunks = [];
                };

                // B·∫Øt ƒë·∫ßu ghi √¢m
                mediaRecorder.start();
                updateButtonState('recording');
                startTimer();

            } catch (error) {
                // X·ª≠ l√Ω l·ªói n·∫øu ng∆∞·ªùi d√πng kh√¥ng c·∫•p quy·ªÅn
                console.error('L·ªói khi truy c·∫≠p microphone:', error);
                resultsPanel.innerHTML = '<p style="color: red;">Kh√¥ng th·ªÉ truy c·∫≠p microphone. Vui l√≤ng c·∫•p quy·ªÅn trong c√†i ƒë·∫∑t tr√¨nh duy·ªát v√† th·ª≠ l·∫°i.</p>';
            }
        } else { // Tr∆∞·ªùng h·ª£p 2: D·ª´ng ghi √¢m
            mediaRecorder.stop();
            updateButtonState('inactive');
            stopTimer();
        }
    };

    // H√†m c·∫≠p nh·∫≠t giao di·ªán c·ªßa n√∫t b·∫•m (m√†u s·∫Øc, icon, ch·ªØ)
    const updateButtonState = (state) => {
        const icon = recordBtn.querySelector('.icon');
        const text = recordBtn.querySelector('.text');

        if (state === 'recording') {
            recordBtn.style.backgroundColor = '#dc3545'; // Chuy·ªÉn sang m√†u ƒë·ªè
            icon.textContent = '‚ñ†'; // Bi·ªÉu t∆∞·ª£ng stop
            text.textContent = 'D·ª™NG';
        } else {
            recordBtn.style.backgroundColor = '#28a745'; // Tr·ªü v·ªÅ m√†u xanh
            icon.textContent = 'üé§'; // Bi·ªÉu t∆∞·ª£ng micro
            text.textContent = 'GHI √ÇM';
        }
    };

    // H√†m b·∫Øt ƒë·∫ßu ƒë·ªìng h·ªì ƒë·∫øm gi·ªù
    const startTimer = () => {
        seconds = 0;
        timerElement.textContent = '00:00';
        timerInterval = setInterval(() => {
            seconds++;
            const minutes = Math.floor(seconds / 60).toString().padStart(2, '0');
            const secs = (seconds % 60).toString().padStart(2, '0');
            timerElement.textContent = `${minutes}:${secs}`;
        }, 1000);
    };

    // H√†m d·ª´ng ƒë·ªìng h·ªì
    const stopTimer = () => {
        clearInterval(timerInterval);
    };

    // --- G√ÅN S·ª∞ KI·ªÜN ---

    // G√°n s·ª± ki·ªán 'click' cho n√∫t ghi √¢m ƒë·ªÉ g·ªçi h√†m toggleRecording
    recordBtn.addEventListener('click', toggleRecording);
});